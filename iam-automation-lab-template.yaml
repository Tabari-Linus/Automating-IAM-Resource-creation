AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Automating IAM Resources for Lab
  - Generates a one-time password in AWS Secrets Manager
  - Creates S3 and EC2 read-only IAM groups
  - Creates two IAM users with console access, assigns groups, and forces password change on first login.

Metadata:
  Source: 'Template for IAM Automation Lab'
  GithubHint: 'Save this file as iam-automation-lab-template.yaml in your repo'

Resources:
  OneTimePasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Auto-generated one-time password for IAM users
      GenerateSecretString:
        SecretStringTemplate: '{"password": ""}'
        GenerateStringKey: password
        PasswordLength: 20
        ExcludeCharacters: '"@/\\'
        ExcludePunctuation: true

  S3UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: S3ReadGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  EC2UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: EC2ReadGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess

  S3IAMUser:
    Type: AWS::IAM::User
    Properties:
      UserName: s3-user
      Groups:
        - !Ref S3UserGroup

  EC2IAMUser:
    Type: AWS::IAM::User
    Properties:
      UserName: ec2-user
      Groups:
        - !Ref EC2UserGroup


  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsAndIAMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref OneTimePasswordSecret
              - Effect: Allow
                Action:
                  - iam:CreateLoginProfile
                  - iam:DeleteLoginProfile
                Resource: '*'

  PasswordSetterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Code:
        ZipFile: |
          import json
          import boto3
          from urllib import request, parse

          def handler(event, context):
              response = {
                  'Status': 'SUCCESS',
                  'PhysicalResourceId': event['LogicalResourceId'] + '_ProfileSetter',
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId']
              }
              try:
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      secret_arn = event['ResourceProperties']['SecretArn']
                      user_names = event['ResourceProperties']['UserNames']
                      sm_client = boto3.client('secretsmanager')
                      secret_value = sm_client.get_secret_value(SecretId=secret_arn)['SecretString']
                      password_dict = json.loads(secret_value)
                      password = password_dict['password']
                      iam_client = boto3.client('iam')
                      for user in user_names:
                          iam_client.create_login_profile(
                              UserName=user,
                              Password=password,
                              PasswordResetRequired=True
                          )
                  elif event['RequestType'] == 'Delete':
                      user_names = event['ResourceProperties']['UserNames']
                      iam_client = boto3.client('iam')
                      for user in user_names:
                          try:
                              iam_client.delete_login_profile(UserName=user)
                          except:
                              pass
              except Exception as e:
                  response['Status'] = 'FAILED'
                  response['Reason'] = str(e)
              response_data = json.dumps(response).encode('utf-8')
              req = request.Request(event['ResponseURL'], data=response_data, headers={'Content-Length': len(response_data), 'Content-Type': ''}, method='PUT')
              with request.urlopen(req) as f:
                  pass

  CustomPasswordSetter:
    Type: Custom::PasswordSetter
    DependsOn:
      - S3IAMUser
      - EC2IAMUser
      - OneTimePasswordSecret
    Properties:
      ServiceToken: !GetAtt PasswordSetterLambda.Arn
      SecretArn: !Ref OneTimePasswordSecret
      UserNames:
        - !Ref S3IAMUser
        - !Ref EC2IAMUser


# Outputs:
#   SecretArn:
#     Description: ARN of the Secrets Manager secret that holds the shared one-time password.
#     Value: !Ref OneTimePasswordSecret
#   AccountConsoleUrl:
#     Description: Account-specific console sign-in URL.
#     Value: !Sub 'https://${AWS::AccountId}.signin.aws.amazon.com/console'
#   S3GroupName:
#     Description: Name of the S3 read-only group.
#     Value: !Ref S3ReadGroup
#   EC2GroupName:
#     Description: Name of the EC2 read-only group.
#     Value: !Ref EC2ReadGroup
#   S3UserName:
#     Description: The S3-focused IAM username.
#     Value: !Ref S3IAMUser
#   EC2UserName:
#     Description: The EC2-focused IAM username.
#     Value: !Ref EC2IAMUser
#   LambdaFunctionArn:
#     Description: ARN of the Lambda function that sets the login profiles.
#     Value: !GetAtt PasswordSetterLambda.Arn
#   LambdaExecutionRoleArn:
#     Description: ARN of the IAM role that allows the Lambda function to execute.
#     Value: !GetAtt LambdaExecutionRole.Arn